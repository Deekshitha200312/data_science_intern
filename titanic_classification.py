# -*- coding: utf-8 -*-
"""Titanic Classification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xho5e66fiahBV4a2iNqhTNLjXE2nA_ts

**Import Necessary Libraries**
"""

import warnings
warnings.filterwarnings('ignore')
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""**Load the Dataset and Explore**"""

# Uploading the dataset


from google.colab import files

uploaded = files.upload()

# Uploading the dataset


from google.colab import files

uploaded = files.upload()

# Uploading the dataset


from google.colab import files

uploaded = files.upload()

train_df = pd.read_csv('tested.csv')
test_df = pd.read_csv('titanic_test.csv')
test_true = pd.read_csv('gender_submission.csv')

train_df

test_df

test_true

train_df.info()

"""**Data Cleaning**"""

#cabin have too many insufficient data and Name of passenger is insignificant
train_df.drop(columns=['Name','Cabin','PassengerId','Ticket'],inplace=True)
train_df.head()

test_df.drop(columns=['Name','Cabin','PassengerId','Ticket'],inplace=True)
test_df.head()

train_df['Age'].fillna(train_df['Age'].mean(),inplace=True)
test_df['Age'].fillna(test_df['Age'].mean(),inplace=True)
train_df.info(),test_df.info()

train_df=train_df.dropna()
test_df['Fare'].fillna(test_df['Fare'].mean(),inplace=True)
train_df.info(),test_df.info()

from sklearn.preprocessing import LabelEncoder
sex_type=LabelEncoder()
train_df['Sex']=sex_type.fit_transform(train_df['Sex'])
test_df['Sex']=sex_type.fit_transform(test_df['Sex'])

embarked_type=LabelEncoder()
train_df['Embarked']=embarked_type.fit_transform(train_df['Embarked'])
test_df['Embarked']=embarked_type.fit_transform(test_df['Embarked'])

bins=[0,10,25,50,100]
labels=['0','1','2','3']
train_df['Age_group']=pd.cut(train_df['Age'],bins=bins,labels=labels)
test_df['Age_group']=pd.cut(test_df['Age'],bins=bins,labels=labels)
train_df

age_type=LabelEncoder()
train_df['Age_group']=age_type.fit_transform(train_df['Age_group'])
test_df['Age_group']=age_type.fit_transform(test_df['Age_group'])
train_df

train_df['Fare'].plot(figsize = (10, 7))
plt.title("Distribution of Fare")
plt.show()

train_df['z_score']=(train_df.Fare-train_df.Fare.mean())/train_df.Fare.std()
train_df.head()

train_df.describe()

train_df=train_df[~(train_df['z_score']>1)]
train_df

train_df.drop(columns='z_score',inplace=True)

"""**Data Visualisation**"""

train_df['Fare'].plot(figsize = (10, 7))
plt.title("Distribution of Fare")
plt.show()

plt.pie(train_df[['Age_group']].value_counts(),labels=['child','junior','adult','senior'],radius=1.1,colors=['maroon','firebrick','crimson','red'])
center_circle=plt.Circle((0,0),0.6,color='white')
p=plt.gcf()
p.gca().add_artist(center_circle)
plt.title('Survival Ratio-Age Groups')
plt.show()

train_df.drop(columns='Age',inplace=True)
test_df.drop(columns='Age',inplace=True)

train_df.groupby(['Survived']).mean()

train_df.corr()

plt.figure(figsize=(7,5))
sns.heatmap(train_df.corr(),annot=True)

train_df[['Pclass']].value_counts()

plt.pie(train_df[['Pclass']].value_counts(),labels=['Third Class','Second Class','First Class'],radius=1.1,colors=['gold','yellow','orange'])
center_circle=plt.Circle((0,0),0.6,color='white')
p=plt.gcf()
p.gca().add_artist(center_circle)
plt.title('Survival Ratio')
plt.show()

plt.figure(figsize=(8,5))
sns.boxplot(x='Pclass',y='Fare',data=train_df)

plt.figure(figsize=(8,5))
sns.boxplot(x='Survived',y='Fare',data=train_df)

train_df

"""**Model Building**"""

X_train=train_df.drop(columns='Survived')
Y_train=train_df['Survived']

X_train.shape,Y_train.shape

"""**Create and train Decision Tree Classifier**"""

from sklearn.tree import DecisionTreeClassifier
survival_model=DecisionTreeClassifier()
survival_model.fit(X_train,Y_train)

survival_model.score(X_train,Y_train)

"""**Use the trained model to make predictions on the test data**"""

y_predicted=survival_model.predict(test_df)
y_predicted

y_test=test_true['Survived']

"""**Evaluate the models performance using matrices like accuracy , confution matric and classification report**"""

from sklearn.metrics import confusion_matrix,classification_report,accuracy_score

accuracy=accuracy_score(y_test,y_predicted)
accuracy

cm=confusion_matrix(y_test,y_predicted)
print(cm)

class_report=classification_report(y_test,y_predicted)
print(class_report)

"""**Create and train Random Forest Classifier**"""

from sklearn.ensemble import RandomForestClassifier
survival_model_forest=RandomForestClassifier(n_estimators=20)
survival_model_forest.fit(X_train,Y_train)

survival_model_forest.score(X_train,Y_train)

"""**Use the trained Random Forest Classifier model to make predictions on the test data**"""

y_predicted_forest=survival_model_forest.predict(test_df)
y_predicted_forest

"""**Evaluate the Random Forest Classifier models performance using matrics like accuracy,confusion matric and classification report**"""

from sklearn.metrics import confusion_matrix

accuracy_forest=accuracy_score(y_test,y_predicted_forest)
accuracy_forest

cm_forest=confusion_matrix(y_test,y_predicted_forest)
cm_forest

class_report_forest=classification_report(y_test,y_predicted_forest)
print(class_report_forest)